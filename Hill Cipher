# Hill Cipher in Python

import numpy as np

print("\n\nWelcome to the HILL CIPHER")


def encrypt():
    msg = str(input("\n\tYOU ARE NOW ENCRYPTIING THE MESSAGE \n\t\tENTER PLAIN TEXT :"))
    # Replace spaces with nothing
    msg = msg.replace(" ", "")
    # Ask for keyword and get encryption matrix
    c = make_key()
    # Append zero if the messsage isn't divisble by 2
    len_check = len(msg) % 2 == 0
    if not len_check:
        msg += "0"
    # Populate message matrix
    p = create_matrix_of_integers_from_string(msg)
    # Calculate length of the message
    msg_len = int(len(msg) / 2)
    # Calculate P * C
    msg = ""
    for i in range(msg_len):
        # Dot product
        row_0 = p[0][i] * c[0][0] + p[1][i] * c[0][1]
        # Modulate and add 65 to get back to the A-Z range in ascii
        integer = int(row_0 % 26 + 65)
        # Change back to chr type and add to text
        msg += chr(integer)
        # Repeat for the second column
        row_1 = p[0][i] * c[1][0] + p[1][i] * c[1][1]
        integer = int(row_1 % 26 + 65)
        msg += chr(integer)
    print(f"\t\tThe ciphertext is: {msg}")
    return msg


def decrypt():
    msg = str(input("\n\tYOU ARE NOW DECRYPTING THE MESSAGE \n\t\tENTER CIPHER TEXT : "))
    # Ask for keyword and get encryption matrix
    c = make_key()
    # Inverse matrix
    determinant = c[0][0] * c[1][1] - c[0][1] * c[1][0]
    determinant = determinant % 26
    multiplicative_inverse = find_multiplicative_inverse(determinant)
    c_inverse = c
    # Swap a <-> d
    c_inverse[0][0], c_inverse[1][1] = c_inverse[1, 1], c_inverse[0, 0]
    # Replace
    c[0][1] *= -1
    c[1][0] *= -1
    for row in range(2):
        for column in range(2):
            c_inverse[row][column] *= multiplicative_inverse
            c_inverse[row][column] = c_inverse[row][column] % 26

    p = create_matrix_of_integers_from_string(msg)
    msg_len = int(len(msg) / 2)
    msg = ""
    for i in range(msg_len):
        # Dot product
        column_0 = p[0][i] * c_inverse[0][0] + p[1][i] * c_inverse[0][1]
        # Modulate and add 65 to get back to the A-Z range in ascii
        integer = int(column_0 % 26 + 65)
        # Change back to chr type and add to text
        msg += chr(integer)
        # Repeat for the second column
        column_1 = p[0][i] * c_inverse[1][0] + p[1][i] * c_inverse[1][1]
        integer = int(column_1 % 26 + 65)
        msg += chr(integer)
    if msg[-1] == "0":
        msg = msg[:-1]
    print(f"\t\tThe plaintext is: {msg}")
    return msg


def find_multiplicative_inverse(determinant):
    multiplicative_inverse = -1
    for i in range(26):
        inverse = determinant * i
        if inverse % 26 == 1:
            multiplicative_inverse = i
            break
    return multiplicative_inverse


def make_key():
    # Make sure cipher determinant is relatively prime to 26 and only a/A - z/Z are given
    determinant = 0
    c = None
    while True:
        cipher = input("\t\tEnter the 4 letter secret key: ")
        if cipher.isalpha():
            c = create_matrix_of_integers_from_string(cipher)
            determinant = c[0][0] * c[1][1] - c[0][1] * c[1][0]
            determinant = determinant % 26
            inverse_element = find_multiplicative_inverse(determinant)
            if inverse_element == -1:
                print("\tDeterminant is not relatively prime to 26, uninvertible key")
            elif np.amax(c) > 26 and np.amin(c) < 0:
                print("\tOnly a-z characters are accepted")
                print(np.amax(c), np.amin(c))
            else:
                break
        else:
            print("\tOnly letters are allowed, Please try again")
    return c


def create_matrix_of_integers_from_string(string):
    # Map string to a list of integers a/A <-> 0, b/B <-> 1 ... z/Z <-> 25
    integers = [chr_to_int(c) for c in string]
    length = len(integers)
    m = np.zeros((2, int(length / 2)), dtype=np.int32)
    iterator = 0
    for column in range(int(length / 2)):
        for row in range(2):
            m[row][column] = integers[iterator]
            iterator += 1
    return m


def chr_to_int(char):
    # Uppercase the char to get into range 65-90 in ascii table
    char = char.upper()
    # Cast chr to int and subtract 65 to get 0-25
    integer = ord(char) - 65
    return integer


while '3':
    choice = input(
        "\n\tPress 1 for Encryption \n\tPress 2 for Decryption "
        "\n\tPress 3 to EXIT \n\tPLEASE SELECT WHAT YOU WANT TO DO ==> ")
    if choice == '1':
        encrypt()
    elif choice == '2':
        decrypt()
    elif choice == '3':
        exit()
    else:
        print("\tPlease Choose from the above mentioned list.")
